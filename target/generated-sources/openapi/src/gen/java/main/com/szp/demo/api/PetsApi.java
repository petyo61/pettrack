/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.szp.demo.api;

import com.szp.demo.model.ApiPet;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-09T11:31:28.289091+02:00[Europe/Budapest]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "pets", description = "the pets API")
public interface PetsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /pets : Create a pet
     *
     * @param apiPet  (required)
     * @return Pet created (status code 201)
     */
    @Operation(
        operationId = "createPet",
        summary = "Create a pet",
        responses = {
            @ApiResponse(responseCode = "201", description = "Pet created")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pets",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _createPet(
        @Parameter(name = "ApiPet", description = "", required = true) @Valid @RequestBody ApiPet apiPet
    ) {
        return createPet(apiPet);
    }

    // Override this method
    default  ResponseEntity<Void> createPet(ApiPet apiPet) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pets : List all pets
     *
     * @return A list of pets. (status code 200)
     */
    @Operation(
        operationId = "listPets",
        summary = "List all pets",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of pets.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ApiPet.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ApiPet>> _listPets(
        
    ) {
        return listPets();
    }

    // Override this method
    default  ResponseEntity<List<ApiPet>> listPets() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"inZone\" : true, \"petType\" : \"Cat\", \"lostTracker\" : true, \"trackerType\" : \"small\", \"ownerId\" : 0 }, { \"inZone\" : true, \"petType\" : \"Cat\", \"lostTracker\" : true, \"trackerType\" : \"small\", \"ownerId\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /pets/{ownwerId} : Info for a specific pet
     *
     * @param ownwerId  (required)
     * @return Expected response to a valid request (status code 200)
     */
    @Operation(
        operationId = "showPetById",
        summary = "Info for a specific pet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiPet.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pets/{ownwerId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ApiPet> _showPetById(
        @Parameter(name = "ownwerId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("ownwerId") Long ownwerId
    ) {
        return showPetById(ownwerId);
    }

    // Override this method
    default  ResponseEntity<ApiPet> showPetById(Long ownwerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"inZone\" : true, \"petType\" : \"Cat\", \"lostTracker\" : true, \"trackerType\" : \"small\", \"ownerId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /pets : Update a pet
     *
     * @param apiPet  (required)
     * @return Pet updated (status code 200)
     */
    @Operation(
        operationId = "updatePet",
        summary = "Update a pet",
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet updated")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pets",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _updatePet(
        @Parameter(name = "ApiPet", description = "", required = true) @Valid @RequestBody ApiPet apiPet
    ) {
        return updatePet(apiPet);
    }

    // Override this method
    default  ResponseEntity<Void> updatePet(ApiPet apiPet) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
